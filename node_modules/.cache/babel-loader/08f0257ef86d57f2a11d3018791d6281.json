{"ast":null,"code":"import _slicedToArray from \"/Users/belka/Desktop/React/IndigenousPeoplesRussia/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/belka/Desktop/React/IndigenousPeoplesRussia/src/components/PeoplesMap.jsx\";\n\nimport React from \"react\";\nimport { useEffect, useState, useRef } from \"react\";\nimport L from \"leaflet\";\nimport { MapContainer, GeoJSON, ScaleControl, ZoomControl } from \"react-leaflet\";\nimport InfoBox from \"./InfoBox\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"./PeoplesMap.css\";\nimport \"proj4leaflet\";\nimport \"proj4\";\nimport * as myConstClass from \"./constants.js\";\nimport world from \"../data/world.json\";\nimport russia from \"../data/russia.json\";\nimport lakes from \"../data/lakes.json\";\nimport PeoplesMapQuiz from \"./PeoplesMapQuiz\";\nimport PeoplesMapInfo from \"./PeoplesMapInfo\";\nimport PeoplesMapStart from \"./PeoplesMapStart\";\n\nvar PeoplesMap = function PeoplesMap(props) {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      info = _useState2[0],\n      SetInfo = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      answer = _useState4[0],\n      SetAnswer = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      score = _useState6[0],\n      setScore = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      isRight = _useState8[0],\n      setIsRight = _useState8[1]; // Hook\n\n\n  function usePrevious(value) {\n    var ref = useRef(); // Store current value in ref\n\n    useEffect(function () {\n      ref.current = value;\n    }, [value]); // Only re-run if value changes\n    // Return previous value (happens before update in useEffect above)\n\n    return ref.current;\n  }\n\n  var crs = new L.Proj.CRS(\"EPSG:3576\", \"+proj=laea +lat_0=90 +lon_0=90 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs\", {\n    resolutions: [32768, 16384, 8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1, 0.5] //origin: [ -180, -90 ]\n\n  });\n  var prevScore = usePrevious(score);\n  useEffect(function () {\n    if (prevScore !== score) {\n      setIsRight(true);\n    } else {\n      setIsRight(false);\n    }\n  }, [props.quizMode, score, prevScore, isRIght]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(InfoBox, {\n    info: info,\n    answer: answer,\n    isQuiz: props.quizMode,\n    islearn: props.learnMode,\n    isStart: props.startMode,\n    score: score,\n    handleSetScore: setScore,\n    handleStartQuizClick: props.handleStartQuizClick,\n    handleLearnClick: props.handleLearnClick,\n    handleStartModeClick: props.handleStartModeClick,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(MapContainer, {\n    style: {\n      height: \"100vh\"\n    },\n    zoomControl: false,\n    zoom: 2,\n    center: [65, 130],\n    minZoom: 2,\n    maxZoom: 5,\n    crs: crs,\n    maxBounds: [[20, 75], [870, 2000]],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(GeoJSON, {\n    data: world,\n    style: myConstClass.basemapStyle2,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(GeoJSON, {\n    data: russia,\n    style: myConstClass.basemapStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(GeoJSON, {\n    data: lakes,\n    style: myConstClass.waterStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }), props.quizMode ? /*#__PURE__*/React.createElement(PeoplesMapQuiz, {\n    handleSetAnswer: SetAnswer,\n    isRight: isRight,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 27\n    }\n  }) : null, props.learnMode ? /*#__PURE__*/React.createElement(PeoplesMapInfo, {\n    handleSetInfo: SetInfo,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 28\n    }\n  }) : null, !props.quizMode & !props.learnMode ? /*#__PURE__*/React.createElement(PeoplesMapStart, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 47\n    }\n  }) : null, /*#__PURE__*/React.createElement(ScaleControl, {\n    position: \"bottomleft\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(ZoomControl, {\n    position: \"bottomleft\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default PeoplesMap;","map":{"version":3,"sources":["/Users/belka/Desktop/React/IndigenousPeoplesRussia/src/components/PeoplesMap.jsx"],"names":["React","useEffect","useState","useRef","L","MapContainer","GeoJSON","ScaleControl","ZoomControl","InfoBox","myConstClass","world","russia","lakes","PeoplesMapQuiz","PeoplesMapInfo","PeoplesMapStart","PeoplesMap","props","info","SetInfo","answer","SetAnswer","score","setScore","isRight","setIsRight","usePrevious","value","ref","current","crs","Proj","CRS","resolutions","prevScore","quizMode","isRIght","learnMode","startMode","handleStartQuizClick","handleLearnClick","handleStartModeClick","height","basemapStyle2","basemapStyle","waterStyle"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useEffect, useState, useRef } from \"react\";\nimport L from \"leaflet\";\nimport {\n  MapContainer,\n  GeoJSON,\n  ScaleControl,\n  ZoomControl,\n} from \"react-leaflet\";\nimport InfoBox from \"./InfoBox\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"./PeoplesMap.css\";\nimport \"proj4leaflet\";\nimport \"proj4\";\nimport * as myConstClass from \"./constants.js\";\nimport world from \"../data/world.json\";\nimport russia from \"../data/russia.json\";\nimport lakes from \"../data/lakes.json\";\nimport PeoplesMapQuiz from \"./PeoplesMapQuiz\";\nimport PeoplesMapInfo from \"./PeoplesMapInfo\";\nimport PeoplesMapStart from \"./PeoplesMapStart\";\n\nconst PeoplesMap = (props) => {\n  let [info, SetInfo] = useState(null);\n  let [answer, SetAnswer] = useState(null);\n  let [score, setScore] = useState(0);\n  let [isRight, setIsRight] = useState(false)\n\n\n  \n  // Hook\nfunction usePrevious(value) {\n  const ref = useRef();\n  // Store current value in ref\n  useEffect(() => {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n  // Return previous value (happens before update in useEffect above)\n  return ref.current;\n}\n\n  const crs = new L.Proj.CRS(\n    \"EPSG:3576\",\n    \"+proj=laea +lat_0=90 +lon_0=90 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs\",\n    {\n      resolutions: [\n        32768, 16384, 8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4,\n        2, 1, 0.5,\n      ],\n      //origin: [ -180, -90 ]\n    }\n  );\n  const prevScore = usePrevious(score);\n\n  useEffect(() => {\n    if(prevScore !== score){\n      setIsRight(true)\n    } else{setIsRight(false)}\n  }, [props.quizMode, score, prevScore, isRIght]);\n\n  return (\n    <>\n      <InfoBox\n        info={info}\n        answer={answer}\n        isQuiz={props.quizMode}\n        islearn={props.learnMode}\n        isStart={props.startMode}\n        score = {score}\n        handleSetScore = {setScore}\n        handleStartQuizClick={props.handleStartQuizClick}\n        handleLearnClick={props.handleLearnClick}\n        handleStartModeClick={props.handleStartModeClick}\n      />\n      <MapContainer\n        style={{ height: \"100vh\" }}\n        zoomControl={false}\n        zoom={2}\n        center={[65, 130]}\n        minZoom={2}\n        maxZoom={5}\n        crs={crs}\n        maxBounds={[\n          [20, 75],\n          [870, 2000],\n        ]}\n      >\n        <GeoJSON data={world} style={myConstClass.basemapStyle2} />\n\n        <GeoJSON data={russia} style={myConstClass.basemapStyle} />\n\n        <GeoJSON data={lakes} style={myConstClass.waterStyle} />\n\n        {props.quizMode ? <PeoplesMapQuiz handleSetAnswer={SetAnswer} isRight={isRight} /> : null}\n        {props.learnMode ? <PeoplesMapInfo handleSetInfo={SetInfo} /> : null}\n\n        {!props.quizMode & !props.learnMode ? <PeoplesMapStart /> : null}\n\n        <ScaleControl position=\"bottomleft\" />\n        <ZoomControl position=\"bottomleft\" />\n      </MapContainer>\n    </>\n  );\n};\n\nexport default PeoplesMap;\n"]},"metadata":{},"sourceType":"module"}