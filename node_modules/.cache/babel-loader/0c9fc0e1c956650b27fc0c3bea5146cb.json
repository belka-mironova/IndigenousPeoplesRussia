{"ast":null,"code":"import _slicedToArray from \"/Users/belka/Desktop/React/IndigenousPeoplesRussia/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/belka/Desktop/React/IndigenousPeoplesRussia/src/components/PeoplesMap.jsx\";\n\nimport React from \"react\";\nimport { useEffect, useRef, useState } from \"react\";\nimport L from \"leaflet\";\nimport { MapContainer, GeoJSON, ScaleControl, ZoomControl } from \"react-leaflet\";\nimport InfoBox from \"./InfoBox\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"./PeoplesMap.css\";\nimport \"proj4leaflet\";\nimport \"proj4\";\nimport * as myConstClass from \"./constants.js\";\nimport world from \"../data/world.json\";\nimport russia from \"../data/russia.json\";\nimport lakes from \"../data/lakes.json\";\nimport nations from \"../data/nations.json\";\n\nvar PeoplesMap = function PeoplesMap(props) {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      info = _useState2[0],\n      SetInfo = _useState2[1];\n\n  var selected = null;\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      answer = _useState4[0],\n      SetAnswer = _useState4[1]; // props.quizMode\n  // props.startMode\n  // props.learnMode\n\n\n  useEffect(function () {}, [props.quizMode, props.startMode, props.learnMode]);\n\n  var HighlightFeature = function HighlightFeature(layer) {\n    if (selected == null || selected._leaflet_id !== layer._leaflet_id) {\n      layer.setStyle({\n        /*weight: 3,\n        color: 'white',*/\n        weight: 1.5,\n        dashArray: \"\",\n        fillOpacity: 0.9\n      });\n      /*layer.bindTooltip(feature.properties.Nation, {permanent: true, direction: 'center', position:'auto'}).openTooltip(); */\n\n      if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {\n        layer.bringToFront();\n      }\n    }\n  };\n\n  var geoJsonRef = useRef();\n\n  var ResetHighlight = function ResetHighlight(layer) {\n    if (selected == null || selected._leaflet_id !== layer._leaflet_id) {\n      geoJsonRef.current.resetStyle(layer);\n    }\n  };\n\n  var Select = function Select(layer) {\n    if (selected !== null) {\n      var previous = selected;\n    }\n\n    SetInfo(layer.feature.properties);\n    info = layer.feature.properties;\n    layer.setStyle({\n      weight: 3,\n      color: \"white\",\n      fillOpacity: 1\n    });\n    selected = layer;\n\n    if (previous) {\n      ResetHighlight(previous);\n    }\n  };\n\n  var onEachFeatureF = function onEachFeatureF(feature, layer) {\n    layer.on({\n      click: function click(e) {\n        Select(e.target);\n        SetAnswer(e.target.feature.properties.Nation); // console.log(info);\n      },\n      mouseover: function mouseover(e) {\n        HighlightFeature(e.target);\n      },\n      mouseout: function mouseout(e) {\n        ResetHighlight(e.target);\n      }\n    }); //layer.bindPopup(\"ID: \" + feature.properties.fid+ \"<br>Народ: \" + feature.properties.Nation + \"<br>Описание: \" + feature.properties.Nation);\n\n    layer.bindTooltip(feature.properties.Nation, {\n      permanent: true,\n      direction: \"center\",\n      position: \"auto\"\n    }).openTooltip();\n  };\n\n  var crs = new L.Proj.CRS(\"EPSG:3576\", \"+proj=laea +lat_0=90 +lon_0=90 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs\", {\n    resolutions: [32768, 16384, 8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1, 0.5] //origin: [ -180, -90 ]\n\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(InfoBox, {\n    info: info,\n    answer: answer,\n    isQuiz: props.quizMode,\n    islearn: props.learnMode,\n    isStart: props.startMode,\n    handleStartQuizClick: props.handleStartQuizClick,\n    handleLearnClick: props.handleLearnClick,\n    handleStartModeClick: props.handleStartModeClick,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(MapContainer, {\n    style: {\n      height: \"100vh\"\n    },\n    zoomControl: false,\n    zoom: 2,\n    center: [65, 130],\n    minZoom: 2,\n    maxZoom: 5,\n    crs: crs,\n    maxBounds: [[20, 75], [870, 2000]],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(GeoJSON, {\n    data: world,\n    style: myConstClass.basemapStyle2,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(GeoJSON, {\n    data: russia,\n    style: myConstClass.basemapStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(GeoJSON, {\n    data: lakes,\n    style: myConstClass.waterStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(GeoJSON, {\n    data: nations,\n    style: myConstClass.subteStyle,\n    onEachFeature: onEachFeatureF,\n    ref: geoJsonRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(ScaleControl, {\n    position: \"bottomleft\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(ZoomControl, {\n    position: \"bottomleft\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default PeoplesMap;","map":{"version":3,"sources":["/Users/belka/Desktop/React/IndigenousPeoplesRussia/src/components/PeoplesMap.jsx"],"names":["React","useEffect","useRef","useState","L","MapContainer","GeoJSON","ScaleControl","ZoomControl","InfoBox","myConstClass","world","russia","lakes","nations","PeoplesMap","props","info","SetInfo","selected","answer","SetAnswer","quizMode","startMode","learnMode","HighlightFeature","layer","_leaflet_id","setStyle","weight","dashArray","fillOpacity","Browser","ie","opera","edge","bringToFront","geoJsonRef","ResetHighlight","current","resetStyle","Select","previous","feature","properties","color","onEachFeatureF","on","click","e","target","Nation","mouseover","mouseout","bindTooltip","permanent","direction","position","openTooltip","crs","Proj","CRS","resolutions","handleStartQuizClick","handleLearnClick","handleStartModeClick","height","basemapStyle2","basemapStyle","waterStyle","subteStyle"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useEffect, useRef, useState } from \"react\";\nimport L from \"leaflet\";\nimport {\n  MapContainer,\n  GeoJSON,\n  ScaleControl,\n  ZoomControl,\n} from \"react-leaflet\";\nimport InfoBox from \"./InfoBox\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"./PeoplesMap.css\";\nimport \"proj4leaflet\";\nimport \"proj4\";\nimport * as myConstClass from \"./constants.js\";\nimport world from \"../data/world.json\";\nimport russia from \"../data/russia.json\";\nimport lakes from \"../data/lakes.json\";\nimport nations from \"../data/nations.json\";\n\nconst PeoplesMap = (props) => {\n\n  let [info, SetInfo] = useState(null);\n  let selected = null;\n  let [answer, SetAnswer] = useState(null);\n\n\n  // props.quizMode\n  // props.startMode\n  // props.learnMode\n\n  useEffect(() => {\n\n  }, [props.quizMode, props.startMode, props.learnMode]);\n\n\n\n  const HighlightFeature = (layer) => {\n    if (selected == null || selected._leaflet_id !== layer._leaflet_id) {\n      layer.setStyle({\n        /*weight: 3,\n        color: 'white',*/\n        weight: 1.5,\n        dashArray: \"\",\n        fillOpacity: 0.9,\n      });\n      /*layer.bindTooltip(feature.properties.Nation, {permanent: true, direction: 'center', position:'auto'}).openTooltip(); */\n\n      if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {\n        layer.bringToFront();\n      }\n    }\n  };\n\n  const geoJsonRef = useRef();\n\n  const ResetHighlight = (layer) => {\n    if (selected == null || selected._leaflet_id !== layer._leaflet_id) {\n      geoJsonRef.current.resetStyle(layer);\n    }\n  };\n\n  const Select = (layer) => {\n\n\n    if (selected !== null) {\n      var previous = selected;\n    }\n    SetInfo(layer.feature.properties);\n    info = layer.feature.properties;\n\n    layer.setStyle({\n      weight: 3,\n      color: \"white\",\n      fillOpacity: 1,\n    });\n\n    selected = layer;\n    if (previous) {\n      ResetHighlight(previous);\n    }\n  };\n\n \n  const onEachFeatureF = (feature, layer) => {\n    layer.on({\n      click: function (e) {\n        Select(e.target);\n        SetAnswer(e.target.feature.properties.Nation)\n        // console.log(info);\n      },\n      mouseover: function (e) {\n        HighlightFeature(e.target);\n      },\n      mouseout: function (e) {\n        ResetHighlight(e.target);\n      },\n    });\n    //layer.bindPopup(\"ID: \" + feature.properties.fid+ \"<br>Народ: \" + feature.properties.Nation + \"<br>Описание: \" + feature.properties.Nation);\n\n    layer\n      .bindTooltip(feature.properties.Nation, {\n        permanent: true,\n        direction: \"center\",\n        position: \"auto\",\n      })\n      .openTooltip();\n  };\n\n\n\n  const crs = new L.Proj.CRS(\n    \"EPSG:3576\",\n    \"+proj=laea +lat_0=90 +lon_0=90 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs\",\n    {\n      resolutions: [\n        32768, 16384, 8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4,\n        2, 1, 0.5,\n      ],\n      //origin: [ -180, -90 ]\n    }\n  );\n\n\n\n  return (\n    <>\n      <InfoBox info={info} answer={answer} isQuiz={props.quizMode} islearn={props.learnMode} isStart={props.startMode} handleStartQuizClick={props.handleStartQuizClick} handleLearnClick={props.handleLearnClick} handleStartModeClick={props.handleStartModeClick}   />\n      <MapContainer\n        style={{ height: \"100vh\" }}\n        zoomControl={false}\n        zoom={2}\n        center={[65, 130]}\n        minZoom={2}\n        maxZoom={5}\n        crs={crs}\n        maxBounds={[\n          [20, 75],\n          [870, 2000],\n        ]}\n      >\n        <GeoJSON data={world} style={myConstClass.basemapStyle2} />\n\n        <GeoJSON data={russia} style={myConstClass.basemapStyle} />\n\n        <GeoJSON data={lakes} style={myConstClass.waterStyle} />\n\n        <GeoJSON\n          data={nations}\n          style={myConstClass.subteStyle}\n          onEachFeature={onEachFeatureF}\n          ref={geoJsonRef}\n        />\n\n        <ScaleControl position=\"bottomleft\" />\n        <ZoomControl position=\"bottomleft\" />\n      </MapContainer>\n    </>\n  );\n};\n\nexport default PeoplesMap;\n"]},"metadata":{},"sourceType":"module"}