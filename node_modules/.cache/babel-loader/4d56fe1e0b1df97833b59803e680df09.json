{"ast":null,"code":"var _jsxFileName = \"/Users/belka/Desktop/React/IndigenousPeoplesRussia/src/components/PeoplesMapQuiz.jsx\";\nimport React from \"react\";\nimport { useRef, useEffect } from \"react\";\nimport L from \"leaflet\";\nimport { GeoJSON } from \"react-leaflet\";\nimport * as myConstClass from \"./constants.js\";\nimport nations from \"../data/nations.json\";\nexport default function PeoplesMapQuiz(props) {\n  var selected = null;\n\n  var HighlightFeature = function HighlightFeature(layer) {\n    if (selected == null || selected._leaflet_id !== layer._leaflet_id) {\n      layer.setStyle({\n        weight: 1.5,\n        dashArray: \"\",\n        fillOpacity: 1\n      });\n\n      if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {\n        layer.bringToFront();\n      }\n    }\n  };\n\n  var geoJsonRefQuiz = useRef();\n\n  var ResetHighlight = function ResetHighlight(layer) {\n    if (selected == null || selected._leaflet_id !== layer._leaflet_id) {\n      geoJsonRefQuiz.current.resetStyle(layer);\n    }\n  };\n\n  var Select = function Select(layer) {\n    console.log(props.isRight);\n\n    if (props.isRight) {\n      layer.setStyle({\n        weight: 3,\n        color: \"#A4D6A5\",\n        fillOpacity: 0.5,\n        fillColor: \"#A4D6A5\"\n      });\n    } else {\n      layer.setStyle({\n        weight: 1,\n        color: \"white\",\n        fillColor: \"#F27272\",\n        fillOpacity: 0.5\n      });\n    }\n  };\n\n  var onEachFeatureFQuiz = function onEachFeatureFQuiz(feature, layer) {\n    layer.on({\n      click: function click(e) {\n        Select(e.target);\n        props.handleSetAnswer(e.target.feature.properties.Nation);\n        layer.bindTooltip(feature.properties.Nation, {\n          direction: \"center\",\n          position: \"auto\"\n        }).openTooltip();\n      },\n      mouseover: function mouseover(e) {\n        HighlightFeature(e.target);\n      },\n      mouseout: function mouseout(e) {\n        ResetHighlight(e.target);\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(GeoJSON, {\n    data: nations,\n    style: myConstClass.quizStyle,\n    onEachFeature: onEachFeatureFQuiz,\n    ref: geoJsonRefQuiz,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["/Users/belka/Desktop/React/IndigenousPeoplesRussia/src/components/PeoplesMapQuiz.jsx"],"names":["React","useRef","useEffect","L","GeoJSON","myConstClass","nations","PeoplesMapQuiz","props","selected","HighlightFeature","layer","_leaflet_id","setStyle","weight","dashArray","fillOpacity","Browser","ie","opera","edge","bringToFront","geoJsonRefQuiz","ResetHighlight","current","resetStyle","Select","console","log","isRight","color","fillColor","onEachFeatureFQuiz","feature","on","click","e","target","handleSetAnswer","properties","Nation","bindTooltip","direction","position","openTooltip","mouseover","mouseout","quizStyle"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useRef, useEffect } from \"react\";\nimport L from \"leaflet\";\nimport { GeoJSON } from \"react-leaflet\";\nimport * as myConstClass from \"./constants.js\";\nimport nations from \"../data/nations.json\";\n\nexport default function PeoplesMapQuiz(props) {\n  let selected = null;\n\n  const HighlightFeature = (layer) => {\n    if (selected == null || selected._leaflet_id !== layer._leaflet_id) {\n      layer.setStyle({\n        weight: 1.5,\n        dashArray: \"\",\n        fillOpacity: 1,\n      });\n      if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {\n        layer.bringToFront();\n      }\n    }\n  };\n\n  const geoJsonRefQuiz = useRef();\n\n  const ResetHighlight = (layer) => {\n    if (selected == null || selected._leaflet_id !== layer._leaflet_id) {\n      geoJsonRefQuiz.current.resetStyle(layer);\n    }\n  };\n\n  const Select = (layer) => {\n    \n    console.log(props.isRight);\n    if (props.isRight) {\n      layer.setStyle({\n        weight: 3,\n        color: \"#A4D6A5\",\n        fillOpacity: 0.5,\n        fillColor: \"#A4D6A5\",\n      });\n    } else {\n      layer.setStyle({\n        weight: 1,\n        color: \"white\",\n        fillColor: \"#F27272\",\n        fillOpacity: 0.5,\n      });\n    }\n\n  \n  };\n\n  const onEachFeatureFQuiz = (feature, layer) => {\n    layer.on({\n      click: function (e) {\n        Select(e.target);\n        props.handleSetAnswer(e.target.feature.properties.Nation);\n        layer\n          .bindTooltip(feature.properties.Nation, {\n            direction: \"center\",\n            position: \"auto\",\n          })\n          .openTooltip();\n      },\n      mouseover: function (e) {\n        HighlightFeature(e.target);\n      },\n      mouseout: function (e) {\n        ResetHighlight(e.target);\n      },\n    });\n  };\n  return (\n    <GeoJSON\n      data={nations}\n      style={myConstClass.quizStyle}\n      onEachFeature={onEachFeatureFQuiz}\n      ref={geoJsonRefQuiz}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}