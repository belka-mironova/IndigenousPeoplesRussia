{"ast":null,"code":"var _jsxFileName = \"/Users/belka/Desktop/React/IndigenousPeoplesRussia/src/components/PeoplesMapQuiz.jsx\";\nimport React from \"react\";\nimport { useRef, useState } from \"react\";\nimport L from \"leaflet\";\nimport { GeoJSON } from \"react-leaflet\";\nimport * as myConstClass from \"./constants.js\";\nimport nations from \"../data/nations.json\";\nexport default function PeoplesMapQuiz(props) {\n  var selected = null;\n\n  var HighlightFeature = function HighlightFeature(layer) {\n    if (selected == null || selected._leaflet_id !== layer._leaflet_id) {\n      layer.setStyle({\n        weight: 1.5,\n        dashArray: \"\",\n        fillOpacity: 1\n      });\n\n      if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {\n        layer.bringToFront();\n      }\n    }\n  };\n\n  var geoJsonRefQuiz = useRef();\n\n  var ResetHighlight = function ResetHighlight(layer) {\n    if (selected == null || selected._leaflet_id !== layer._leaflet_id) {\n      geoJsonRefQuiz.current.resetStyle(layer);\n    }\n  };\n\n  useEffect(function () {}, [props.question]);\n\n  var Select = function Select(layer) {\n    if (selected !== null) {\n      var previous = selected;\n    }\n\n    if (layer.feature.properties.Nation == props.peoples[props.question]) {\n      layer.setStyle({\n        weight: 2,\n        color: \"#A4D6A5\",\n        fillOpacity: 0.5,\n        fillColor: \"green\"\n      });\n    } else {\n      console.log(props.peoples[props.question]);\n      layer.setStyle({\n        weight: 2,\n        color: \"white\",\n        fillColor: \"#F27272\",\n        fillOpacity: 0.5\n      });\n    }\n\n    selected = layer;\n\n    if (previous) {\n      ResetHighlight(previous);\n    }\n  };\n\n  var onEachFeatureFQuiz = function onEachFeatureFQuiz(feature, layer) {\n    layer.on({\n      click: function click(e) {\n        Select(e.target);\n        props.handleSetAnswer(e.target.feature.properties.Nation);\n        layer.bindTooltip(feature.properties.Nation, {\n          direction: \"center\",\n          position: \"auto\"\n        }).openTooltip();\n      },\n      mouseover: function mouseover(e) {\n        HighlightFeature(e.target);\n      },\n      mouseout: function mouseout(e) {\n        ResetHighlight(e.target);\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(GeoJSON, {\n    data: nations,\n    style: myConstClass.quizStyle,\n    onEachFeature: onEachFeatureFQuiz,\n    ref: geoJsonRefQuiz,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["/Users/belka/Desktop/React/IndigenousPeoplesRussia/src/components/PeoplesMapQuiz.jsx"],"names":["React","useRef","useState","L","GeoJSON","myConstClass","nations","PeoplesMapQuiz","props","selected","HighlightFeature","layer","_leaflet_id","setStyle","weight","dashArray","fillOpacity","Browser","ie","opera","edge","bringToFront","geoJsonRefQuiz","ResetHighlight","current","resetStyle","useEffect","question","Select","previous","feature","properties","Nation","peoples","color","fillColor","console","log","onEachFeatureFQuiz","on","click","e","target","handleSetAnswer","bindTooltip","direction","position","openTooltip","mouseover","mouseout","quizStyle"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useRef, useState } from \"react\";\nimport L from \"leaflet\";\nimport { GeoJSON } from \"react-leaflet\";\nimport * as myConstClass from \"./constants.js\";\nimport nations from \"../data/nations.json\";\n\nexport default function PeoplesMapQuiz(props) {\n  let selected = null;\n\n  const HighlightFeature = (layer) => {\n    if (selected == null || selected._leaflet_id !== layer._leaflet_id) {\n      layer.setStyle({\n        weight: 1.5,\n        dashArray: \"\",\n        fillOpacity: 1,\n      });\n      if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {\n        layer.bringToFront();\n      }\n    }\n  };\n\n  const geoJsonRefQuiz = useRef();\n\n  const ResetHighlight = (layer) => {\n    if (selected == null || selected._leaflet_id !== layer._leaflet_id) {\n      geoJsonRefQuiz.current.resetStyle(layer);\n    }\n  };\n\n  useEffect(() => {\n  }, [props.question]);\n\n  const Select = (layer) => {\n    if (selected !== null) {\n      var previous = selected;\n    }\n\n    if(layer.feature.properties.Nation == props.peoples[props.question] ){\n    layer.setStyle({\n      weight: 2,\n      color: \"#A4D6A5\",\n      fillOpacity: 0.5,\n      fillColor: \"green\",\n    });\n  } else{\n    console.log(props.peoples[props.question])\n    layer.setStyle({\n      weight: 2,\n      color: \"white\",\n      fillColor: \"#F27272\",\n      fillOpacity: 0.5,\n    });\n  }\n\n    selected = layer;\n    if (previous) {\n      ResetHighlight(previous);\n    }\n  };\n\n  const onEachFeatureFQuiz = (feature, layer) => {\n    layer.on({\n      click: function (e) {\n        Select(e.target);\n        props.handleSetAnswer(e.target.feature.properties.Nation);\n        layer\n      .bindTooltip(feature.properties.Nation, {\n        direction: \"center\",\n        position: \"auto\",\n      })\n      .openTooltip();\n      },\n      mouseover: function (e) {\n        HighlightFeature(e.target);\n      },\n      mouseout: function (e) {\n        ResetHighlight(e.target);\n      },\n    });\n  };\n  return (\n    <GeoJSON\n      data={nations}\n      style={myConstClass.quizStyle}\n      onEachFeature={onEachFeatureFQuiz}\n      ref={geoJsonRefQuiz}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}