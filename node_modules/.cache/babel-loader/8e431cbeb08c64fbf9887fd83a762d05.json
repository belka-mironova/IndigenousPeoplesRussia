{"ast":null,"code":"import _slicedToArray from \"/Users/bellamironova/Documents/React_Apps/IndeginousPeoples/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/bellamironova/Documents/React_Apps/IndeginousPeoples/src/components/PeoplesMap.jsx\";\n\nimport React from 'react';\nimport { useRef, useState } from 'react';\nimport L from 'leaflet';\nimport { MapContainer, GeoJSON, ScaleControl, ZoomControl } from \"react-leaflet\";\nimport InfoBox from \"./InfoBox\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"./PeoplesMap.css\";\nimport \"proj4leaflet\";\nimport \"proj4\";\nimport * as myConstClass from \"./constants.js\";\nimport world from \"../data/world.json\";\nimport russia from \"../data/russia.json\";\nimport lakes from \"../data/lakes.json\";\nimport nations from \"../data/nations.json\";\n\nvar PeoplesMap = function PeoplesMap() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      info = _useState2[0],\n      SetInfo = _useState2[1];\n\n  var selected = null;\n\n  var HighlightFeature = function HighlightFeature(layer) {\n    if (selected == null || selected._leaflet_id !== layer._leaflet_id) {\n      layer.setStyle({\n        /*weight: 3,\n        color: 'white',*/\n        weight: 1.5,\n        dashArray: '',\n        fillOpacity: 1\n      });\n\n      if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {\n        layer.bringToFront();\n      }\n    }\n  };\n\n  var geoJsonRef = useRef();\n\n  var ResetHighlight = function ResetHighlight(layer) {\n    if (selected == null || selected._leaflet_id !== layer._leaflet_id) {\n      geoJsonRef.current.resetStyle(layer);\n    }\n  };\n\n  var Select = function Select(layer) {\n    if (selected !== null) {\n      var previous = selected;\n    }\n\n    ;\n    SetInfo(layer.feature.properties);\n    info = layer.feature.properties;\n    layer.setStyle({\n      weight: 3,\n      color: \"white\",\n      fillOpacity: 1\n    });\n    selected = layer;\n\n    if (previous) {\n      ResetHighlight(previous);\n    }\n  };\n\n  var onEachFeatureF = function onEachFeatureF(feature, layer) {\n    layer.on({\n      click: function click(e) {\n        Select(e.target); // console.log(info);\n      },\n      mouseover: function mouseover(e) {\n        HighlightFeature(e.target);\n      },\n      mouseout: function mouseout(e) {\n        ResetHighlight(e.target);\n      }\n    }); //layer.bindPopup(\"ID: \" + feature.properties.fid+ \"<br>Народ: \" + feature.properties.Nation + \"<br>Описание: \" + feature.properties.Nation);\n\n    layer.bindTooltip(feature.properties.Nation, {\n      permanent: true,\n      direction: 'center',\n      position: 'auto'\n    }).openTooltip();\n  };\n\n  var crs = new L.Proj.CRS(\"EPSG:3576\", \"+proj=laea +lat_0=90 +lon_0=90 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs\", {\n    resolutions: [32768, 16384, 8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1, 0.5] //origin: [ -180, -90 ]         \n\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(InfoBox, {\n    info: info,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(MapContainer, {\n    style: {\n      height: \"100vh\"\n    },\n    zoomControl: false,\n    zoom: 2,\n    center: [65, 130],\n    minZoom: 2,\n    maxZoom: 5,\n    crs: crs,\n    maxBounds: [[20, 75], [870, 2000]],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(GeoJSON, {\n    data: world,\n    style: myConstClass.basemapStyle2,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(GeoJSON, {\n    data: russia,\n    style: myConstClass.basemapStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(GeoJSON, {\n    data: lakes,\n    style: myConstClass.waterStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(GeoJSON, {\n    data: nations,\n    style: myConstClass.subteStyle,\n    onEachFeature: onEachFeatureF,\n    ref: geoJsonRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(ScaleControl, {\n    position: \"bottomleft\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(ZoomControl, {\n    position: \"bottomleft\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default PeoplesMap;","map":{"version":3,"sources":["/Users/bellamironova/Documents/React_Apps/IndeginousPeoples/src/components/PeoplesMap.jsx"],"names":["React","useRef","useState","L","MapContainer","GeoJSON","ScaleControl","ZoomControl","InfoBox","myConstClass","world","russia","lakes","nations","PeoplesMap","info","SetInfo","selected","HighlightFeature","layer","_leaflet_id","setStyle","weight","dashArray","fillOpacity","Browser","ie","opera","edge","bringToFront","geoJsonRef","ResetHighlight","current","resetStyle","Select","previous","feature","properties","color","onEachFeatureF","on","click","e","target","mouseover","mouseout","bindTooltip","Nation","permanent","direction","position","openTooltip","crs","Proj","CRS","resolutions","height","basemapStyle2","basemapStyle","waterStyle","subteStyle"],"mappings":"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","sourcesContent":["import React from 'react';\nimport  { useRef, useState } from 'react';\nimport L from 'leaflet';\nimport { MapContainer, GeoJSON, ScaleControl, ZoomControl } from \"react-leaflet\";\nimport InfoBox from \"./InfoBox\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"./PeoplesMap.css\"\nimport \"proj4leaflet\";\nimport \"proj4\";\nimport  * as myConstClass from  \"./constants.js\";\nimport world from \"../data/world.json\";\nimport russia from \"../data/russia.json\";\nimport lakes from \"../data/lakes.json\";\nimport nations from \"../data/nations.json\";\n\n\n\nconst PeoplesMap = () => {\n\nlet [info, SetInfo] = useState(null);\nlet selected = null;\n\n\nconst HighlightFeature = (layer) => {\n  if(selected == null || selected._leaflet_id !== layer._leaflet_id) {\n\n    layer.setStyle({\n        /*weight: 3,\n        color: 'white',*/\n        weight: 1.5,\n        dashArray: '',\n        fillOpacity: 1\n    }\n    );\n\n    if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {\n      layer.bringToFront();\n  }\n}};\n\n\nconst geoJsonRef = useRef();\n\nconst ResetHighlight = (layer) => {\n  if(selected == null || selected._leaflet_id !== layer._leaflet_id) {\n    geoJsonRef.current.resetStyle(layer);\n  }\n};\n\nconst Select = (layer) => {\n  if (selected !== null) {\n    var previous = selected;\n  };\n\n  SetInfo(layer.feature.properties);\n  info = layer.feature.properties;\n\n  layer.setStyle({\n    weight: 3,\n    color: \"white\",\n    fillOpacity: 1\n}\n);\n\n  selected = layer;\n  if (previous) {\n    ResetHighlight(previous);\n  }\n}\n  \nconst onEachFeatureF = (feature, layer) => {\n  layer.on({\n    click: function (e) {\n      Select(e.target); \n      // console.log(info);\n    },  \n    mouseover: function (e) {\n      HighlightFeature(e.target);\n    },\n    mouseout: function (e) {\n      ResetHighlight(e.target);\n    },\n      \n  });\n  //layer.bindPopup(\"ID: \" + feature.properties.fid+ \"<br>Народ: \" + feature.properties.Nation + \"<br>Описание: \" + feature.properties.Nation);\n  layer.bindTooltip(feature.properties.Nation, {permanent: true, direction: 'center', position:'auto'}).openTooltip();\n};\n\n\n  const crs = new L.Proj.CRS(\"EPSG:3576\",\"+proj=laea +lat_0=90 +lon_0=90 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs\",\n {resolutions: [ 32768, 16384, 8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1, 0.5]\n  //origin: [ -180, -90 ]         \n}\n);\n\n\n\n  return (\n    <>\n      <InfoBox info={info}/>\n      <MapContainer style={{ height: \"100vh\" }} zoomControl={false} zoom={2} center={[65, 130]} minZoom={2} maxZoom={5} crs={crs} maxBounds={[[20, 75], [870, 2000]] } >\n\n        <GeoJSON\n          data = {world}\n          style={myConstClass.basemapStyle2}\n        />\n\n        <GeoJSON\n          data = {russia}\n          style={myConstClass.basemapStyle}\n        />\n\n        <GeoJSON\n          data = {lakes}\n          style={ myConstClass.waterStyle}\n        />\n\n        <GeoJSON\n          data={nations}\n          style={myConstClass.subteStyle}\n          onEachFeature={onEachFeatureF}\n          ref={geoJsonRef}\n        />\n\n        <ScaleControl position=\"bottomleft\" />\n        <ZoomControl position=\"bottomleft\" />\n\n      </MapContainer>\n\n    </>\n  );\n};\n\nexport default PeoplesMap;\n"]},"metadata":{},"sourceType":"module"}