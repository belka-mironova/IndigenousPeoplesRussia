{"ast":null,"code":"var _jsxFileName = \"/Users/belka/Desktop/React/IndigenousPeoplesRussia/src/components/PeoplesMapInfo.jsx\";\nimport React from \"react\";\nimport { useRef, useState } from \"react\";\nimport L from \"leaflet\";\nimport { GeoJSON } from \"react-leaflet\";\nimport * as myConstClass from \"./constants.js\";\nimport nations from \"../data/nations.json\";\nexport default function PeoplesMapInfo(props) {\n  var selected = null;\n\n  var HighlightFeature = function HighlightFeature(layer) {\n    if (selected == null || selected._leaflet_id !== layer._leaflet_id) {\n      layer.setStyle({\n        /*weight: 3,\n            color: 'white',*/\n        weight: 1.5,\n        dashArray: \"\",\n        fillOpacity: 0.9\n      });\n      /*layer.bindTooltip(feature.properties.Nation, {permanent: true, direction: 'center', position:'auto'}).openTooltip(); */\n\n      if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {\n        layer.bringToFront();\n      }\n    }\n  };\n\n  var geoJsonRef = useRef();\n\n  var ResetHighlight = function ResetHighlight(layer) {\n    if (selected == null || selected._leaflet_id !== layer._leaflet_id) {\n      geoJsonRef.current.resetStyle(layer);\n    }\n  };\n\n  var Select = function Select(layer) {\n    if (selected !== null) {\n      var previous = selected;\n    }\n\n    props.handleSetInfo(layer.feature.properties);\n    layer.setStyle({\n      weight: 3,\n      color: \"white\",\n      fillOpacity: 1\n    });\n    selected = layer;\n\n    if (previous) {\n      ResetHighlight(previous);\n    }\n  };\n\n  var onEachFeatureF = function onEachFeatureF(feature, layer) {\n    layer.on({\n      click: function click(e) {\n        Select(e.target);\n      },\n      mouseover: function mouseover(e) {\n        HighlightFeature(e.target);\n      },\n      mouseout: function mouseout(e) {\n        ResetHighlight(e.target);\n      }\n    });\n    layer.bindTooltip(feature.properties.Nation, {\n      permanent: true,\n      direction: \"center\",\n      position: \"auto\"\n    }).openTooltip();\n  };\n\n  return /*#__PURE__*/React.createElement(GeoJSON, {\n    data: nations,\n    style: myConstClass.subteStyle,\n    onEachFeature: onEachFeatureF,\n    ref: geoJsonRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["/Users/belka/Desktop/React/IndigenousPeoplesRussia/src/components/PeoplesMapInfo.jsx"],"names":["React","useRef","useState","L","GeoJSON","myConstClass","nations","PeoplesMapInfo","props","selected","HighlightFeature","layer","_leaflet_id","setStyle","weight","dashArray","fillOpacity","Browser","ie","opera","edge","bringToFront","geoJsonRef","ResetHighlight","current","resetStyle","Select","previous","handleSetInfo","feature","properties","color","onEachFeatureF","on","click","e","target","mouseover","mouseout","bindTooltip","Nation","permanent","direction","position","openTooltip","subteStyle"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport { useRef, useState } from \"react\";\nimport L from \"leaflet\";\nimport { GeoJSON } from \"react-leaflet\";\nimport * as myConstClass from \"./constants.js\";\nimport nations from \"../data/nations.json\";\n\nexport default function PeoplesMapInfo(props) {\n  let selected = null;\n\n  const HighlightFeature = (layer) => {\n    if (selected == null || selected._leaflet_id !== layer._leaflet_id) {\n      layer.setStyle({\n        /*weight: 3,\n            color: 'white',*/\n        weight: 1.5,\n        dashArray: \"\",\n        fillOpacity: 0.9,\n      });\n      /*layer.bindTooltip(feature.properties.Nation, {permanent: true, direction: 'center', position:'auto'}).openTooltip(); */\n\n      if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {\n        layer.bringToFront();\n      }\n    }\n  };\n\n  const geoJsonRef = useRef();\n\n  const ResetHighlight = (layer) => {\n    if (selected == null || selected._leaflet_id !== layer._leaflet_id) {\n      geoJsonRef.current.resetStyle(layer);\n    }\n  };\n\n  const Select = (layer) => {\n    if (selected !== null) {\n      var previous = selected;\n    }\n    props.handleSetInfo(layer.feature.properties);\n\n    layer.setStyle({\n      weight: 3,\n      color: \"white\",\n      fillOpacity: 1,\n    });\n\n    selected = layer;\n    if (previous) {\n      ResetHighlight(previous);\n    }\n  };\n\n  const onEachFeatureF = (feature, layer) => {\n    layer.on({\n      click: function (e) {\n        Select(e.target);\n      },\n      mouseover: function (e) {\n        HighlightFeature(e.target);\n      },\n      mouseout: function (e) {\n        ResetHighlight(e.target);\n      },\n    });\n    layer\n      .bindTooltip(feature.properties.Nation, {\n        permanent: true,\n        direction: \"center\",\n        position: \"auto\",\n      })\n      .openTooltip();\n  };\n\n  return (\n    <GeoJSON\n      data={nations}\n      style={myConstClass.subteStyle}\n      onEachFeature={onEachFeatureF}\n      ref={geoJsonRef}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}