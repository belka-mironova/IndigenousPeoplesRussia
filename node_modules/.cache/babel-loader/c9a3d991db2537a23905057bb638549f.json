{"ast":null,"code":"import _slicedToArray from \"/Users/belka/Desktop/React/IndigenousPeoplesRussia/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/belka/Desktop/React/IndigenousPeoplesRussia/src/components/PeoplesMap.jsx\";\n\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport L from \"leaflet\";\nimport { MapContainer, GeoJSON, ScaleControl, ZoomControl } from \"react-leaflet\";\nimport InfoBox from \"./InfoBox\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"./PeoplesMap.css\";\nimport \"proj4leaflet\";\nimport \"proj4\";\nimport * as myConstClass from \"./constants.js\";\nimport world from \"../data/world.json\";\nimport russia from \"../data/russia.json\";\nimport lakes from \"../data/lakes.json\";\nimport PeoplesMapQuiz from \"./PeoplesMapQuiz\";\nimport PeoplesMapInfo from \"./PeoplesMapInfo\";\nimport PeoplesMapStart from \"./PeoplesMapStart\";\n\nvar PeoplesMap = function PeoplesMap(props) {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      info = _useState2[0],\n      SetInfo = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      answer = _useState4[0],\n      SetAnswer = _useState4[1];\n\n  var crs = new L.Proj.CRS(\"EPSG:3576\", \"+proj=laea +lat_0=90 +lon_0=90 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs\", {\n    resolutions: [32768, 16384, 8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1, 0.5] //origin: [ -180, -90 ]\n\n  });\n  useEffect(function () {\n    console.log(props.quizMode);\n  }, [props.quizMode]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(InfoBox, {\n    info: info,\n    answer: answer,\n    isQuiz: props.quizMode,\n    islearn: props.learnMode,\n    isStart: props.startMode,\n    handleStartQuizClick: props.handleStartQuizClick,\n    handleLearnClick: props.handleLearnClick,\n    handleStartModeClick: props.handleStartModeClick,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(MapContainer, {\n    style: {\n      height: \"100vh\"\n    },\n    zoomControl: false,\n    zoom: 2,\n    center: [65, 130],\n    minZoom: 2,\n    maxZoom: 5,\n    crs: crs,\n    maxBounds: [[20, 75], [870, 2000]],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(GeoJSON, {\n    data: world,\n    style: myConstClass.basemapStyle2,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(GeoJSON, {\n    data: russia,\n    style: myConstClass.basemapStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(GeoJSON, {\n    data: lakes,\n    style: myConstClass.waterStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }), props.quizMode ? /*#__PURE__*/React.createElement(PeoplesMapQuiz, {\n    handleSetAnswer: SetAnswer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }) : null, props.learnMode ? /*#__PURE__*/React.createElement(PeoplesMapLearn, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 28\n    }\n  }) : null, props.startMode ? /*#__PURE__*/React.createElement(PeoplesMapStart, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 20\n    }\n  }) : null, /*#__PURE__*/React.createElement(ScaleControl, {\n    position: \"bottomleft\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(ZoomControl, {\n    position: \"bottomleft\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default PeoplesMap;","map":{"version":3,"sources":["/Users/belka/Desktop/React/IndigenousPeoplesRussia/src/components/PeoplesMap.jsx"],"names":["React","useEffect","useState","L","MapContainer","GeoJSON","ScaleControl","ZoomControl","InfoBox","myConstClass","world","russia","lakes","PeoplesMapQuiz","PeoplesMapInfo","PeoplesMapStart","PeoplesMap","props","info","SetInfo","answer","SetAnswer","crs","Proj","CRS","resolutions","console","log","quizMode","learnMode","startMode","handleStartQuizClick","handleLearnClick","handleStartModeClick","height","basemapStyle2","basemapStyle","waterStyle"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport L from \"leaflet\";\nimport {\n  MapContainer,\n  GeoJSON,\n  ScaleControl,\n  ZoomControl,\n} from \"react-leaflet\";\nimport InfoBox from \"./InfoBox\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"./PeoplesMap.css\";\nimport \"proj4leaflet\";\nimport \"proj4\";\nimport * as myConstClass from \"./constants.js\";\nimport world from \"../data/world.json\";\nimport russia from \"../data/russia.json\";\nimport lakes from \"../data/lakes.json\";\nimport PeoplesMapQuiz from \"./PeoplesMapQuiz\";\nimport PeoplesMapInfo from \"./PeoplesMapInfo\";\nimport PeoplesMapStart from \"./PeoplesMapStart\";\n\nconst PeoplesMap = (props) => {\n  let [info, SetInfo] = useState(null);\n  let [answer, SetAnswer] = useState(null);\n\n  const crs = new L.Proj.CRS(\n    \"EPSG:3576\",\n    \"+proj=laea +lat_0=90 +lon_0=90 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs\",\n    {\n      resolutions: [\n        32768, 16384, 8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4,\n        2, 1, 0.5,\n      ],\n      //origin: [ -180, -90 ]\n    }\n  );\n\n  useEffect(() => {\n    console.log(props.quizMode)\n  }, [props.quizMode]);\n\n  return (\n    <>\n      <InfoBox\n        info={info}\n        answer={answer}\n        isQuiz={props.quizMode}\n        islearn={props.learnMode}\n        isStart={props.startMode}\n        handleStartQuizClick={props.handleStartQuizClick}\n        handleLearnClick={props.handleLearnClick}\n        handleStartModeClick={props.handleStartModeClick}\n      />\n      <MapContainer\n        style={{ height: \"100vh\" }}\n        zoomControl={false}\n        zoom={2}\n        center={[65, 130]}\n        minZoom={2}\n        maxZoom={5}\n        crs={crs}\n        maxBounds={[\n          [20, 75],\n          [870, 2000],\n        ]}\n      >\n        <GeoJSON data={world} style={myConstClass.basemapStyle2} />\n\n        <GeoJSON data={russia} style={myConstClass.basemapStyle} />\n\n        <GeoJSON data={lakes} style={myConstClass.waterStyle} />\n\n        {props.quizMode? (\n          <PeoplesMapQuiz handleSetAnswer={SetAnswer} />\n        ) : (null)}\n        {props.learnMode? (<PeoplesMapLearn/>):(null)}\n\n{props.startMode? (<PeoplesMapStart/>):(null)}\n\n        <ScaleControl position=\"bottomleft\" />\n        <ZoomControl position=\"bottomleft\" />\n      </MapContainer>\n    </>\n  );\n};\n\nexport default PeoplesMap;\n"]},"metadata":{},"sourceType":"module"}