{"version":3,"sources":["fonts/Geometria.woff","components/InfoBox.jsx","components/constants.js","components/PeoplesMapQuiz.jsx","components/PeoplesMapInfo.jsx","components/PeoplesMapStart.jsx","components/quizConstants.js","components/PeoplesMap.jsx","components/Peoples.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","InfoBox","props","useState","showScore","setShowScore","currentQuestion","setCurrentQuestion","score","setScore","handleLearnButtonClick","handleLearnClick","handleStartQuizClick","handleStartModeClick","handleQuizButtonClick","useEffect","answer","nationsData","nextQuestion","length","className","isStart","onClick","islearn","info","Nation","Population","Language","LangFamily","Oblast","isQuiz","basemapStyle","color","weight","opacity","fillColor","fillOpacity","basemapStyle2","Opacity","waterStyle","quizStyle","subteStyle","nations","properties","PeoplesMapQuiz","selected","counter","geoJsonRefQuiz","useRef","ResetHighlight","layer","_leaflet_id","current","resetStyle","GeoJSON","data","style","myConstClass","onEachFeature","feature","on","click","e","console","log","previous","setStyle","closeTooltip","Select","target","handleSetAnswer","bindTooltip","direction","position","openTooltip","mouseover","dashArray","L","Browser","ie","opera","edge","bringToFront","HighlightFeature","mouseout","ref","PeoplesMapInfo","geoJsonRef","handleSetInfo","permanent","PeoplesMapStart","selectedNations","i","features","push","PeoplesMap","setNationsData","SetInfo","SetAnswer","quizMode","newNations","array","j","Math","floor","random","temp","shuffleArray","slice","crs","Proj","CRS","resolutions","learnMode","startMode","MapContainer","height","zoomControl","zoom","center","minZoom","maxZoom","maxBounds","world","russia","lakes","ScaleControl","ZoomControl","Peoples","setQuizMode","setLearnMode","setStartMode","option","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b2dbcb16.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Geometria.c7b2c2d8.woff\";","import React, { useState, useEffect } from \"react\";\n// import { selectedNations } from \"./quizConstants\";\nimport \"./InfoBox.css\";\n\nconst InfoBox = (props) => {\n  const [showScore, setShowScore] = useState(false);\n  const [currentQuestion, setCurrentQuestion] = useState(-1);\n  let [score, setScore] = useState(0);\n\n  const handleLearnButtonClick = () => {\n    props.handleLearnClick(true);\n    props.handleStartQuizClick(false);\n    props.handleStartModeClick(false);\n    setShowScore(false);\n    setScore(0);\n    setCurrentQuestion(0);\n  };\n\n  const handleQuizButtonClick = () => {\n    props.handleStartQuizClick(true);\n    props.handleLearnClick(false);\n    props.handleStartModeClick(false);\n  };\n\n  const handleResetButtonClick = () => {\n    props.handleStartQuizClick(true);\n    setShowScore(false);\n    setScore(0);\n    setCurrentQuestion(0);\n  };\n\n  useEffect(() => {\n    if (props.answer === props.nationsData[currentQuestion]) {\n      setScore(score + 1);\n    }\n    const nextQuestion = currentQuestion + 1;\n    if (nextQuestion < props.nationsData.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      props.handleStartQuizClick(false);\n      setShowScore(true);\n    }\n  }, [props.answer]);\n\n  return (\n    <div className=\"infobox\">\n      <div className=\"title\">\n        <h4>\n          Коренные малочисленные <br /> народы Севера, Сибири <br /> и Дальнего\n          Востока России\n        </h4>\n        <br />\n      </div>\n\n      {props.isStart ? (\n        <div className=\"button_container\">\n          <button\n            className=\"button button_learn\"\n            onClick={handleLearnButtonClick}\n          >\n            Узнать о народах\n          </button>\n          <button\n            className=\"button button_play\"\n            onClick={handleQuizButtonClick}\n          >\n            Играть\n          </button>\n        </div>\n      ) : null}\n\n      {props.islearn ? (\n        <div>\n          <p className=\"textnation\">\n            {props.info ? (\n              <h4> {props.info.Nation}</h4>\n            ) : (\n              \"Информация о народе – Выберите область\"\n            )}\n          </p>\n          <div className=\"text\">\n            {props.info ? (\n              <p>\n                <h6>Население: </h6> {props.info.Population} человек\n              </p>\n            ) : null}\n          </div>\n          <div className=\"text\">\n            {\" \"}\n            {props.info ? (\n              <p>\n                <h6>Язык: </h6> {props.info.Language}{\" \"}\n              </p>\n            ) : null}\n          </div>\n          <div className=\"text\">\n            {\" \"}\n            {props.info ? (\n              <p>\n                <h6>Языковая группа: </h6> {props.info.LangFamily}{\" \"}\n              </p>\n            ) : null}\n          </div>\n          <div className=\"text\">\n            {\" \"}\n            {props.info ? (\n              <p>\n                <h6>Регионы проживания: </h6> {props.info.Oblast}{\" \"}\n              </p>\n            ) : null}\n          </div>\n          <div className=\"button_container button_container_learn \">\n            <button\n              className=\"button button_play\"\n              onClick={handleQuizButtonClick}\n            >\n              Играть\n            </button>\n          </div>\n        </div>\n      ) : null}\n\n      {props.isQuiz ? (\n        <div className=\"quiz-box\">\n          <h4 className=\"title__name\">Где живут ...</h4>\n          <div className=\"question-section\">\n            <h1>{props.nationsData[currentQuestion]}?</h1>\n            <span>\n              ({currentQuestion + 1}/{props.nationsData.length})\n            </span>\n          </div>\n        </div>\n      ) : null}\n\n      {showScore ? (\n        <div className=\"title__container\">\n          <div className=\"button_container\">\n            <h4>Вы знаете, где проживают </h4>\n            <h2>\n              {score} из {props.nationsData.length} народов\n            </h2>\n\n            <button\n              className=\"button button_play\"\n              onClick={handleResetButtonClick}\n            >\n              Играть еще раз!\n            </button>\n            <button\n              className=\"button button_learn\"\n              onClick={handleLearnButtonClick}\n            >\n              Узнать о народах\n            </button>\n          </div>\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default InfoBox;\n","export const basemapStyle = {\n  color: \"#E3DFDA\",\n  weight: 2,\n  opacity: 1,\n  fillColor: \"#D9D5D2\",\n  fillOpacity: 1,\n};\n\nexport const basemapStyle2 = {\n  color: \"#D3D3D3\",\n  weight: 1.2,\n  Opacity: 1,\n  fillColor: \"#E6E2DF\",\n  fillOpacity: 1,\n};\n\nexport const waterStyle = {\n  color: \"#9FBFC6\",\n  weight: 0.8,\n  opacity: 1,\n  fillColor: \"#9FBFC6\",\n  fillOpacity: 1,\n};\n\nexport const quizStyle = {\n  color: \"white\",\n  weight: 0.5,\n  opacity: 1,\n  fillColor: \"#91a3bf\",\n  fillOpacity: 0.6,\n};\n\nexport const subteStyle = (nations) => {\n  return {\n    fillColor: nations.properties.color,\n    weight: 1,\n    fillOpacity: 0.6,\n    color: \"white\",\n  };\n};\n","import React from \"react\";\nimport { useRef } from \"react\";\nimport L from \"leaflet\";\nimport { GeoJSON } from \"react-leaflet\";\nimport * as myConstClass from \"./constants.js\";\nimport nations from \"../data/nations.json\";\n\nexport default function PeoplesMapQuiz(props) {\n  let selected = null;\n  let counter = -1;\n\n  const HighlightFeature = (layer) => {\n    if (selected == null || selected._leaflet_id !== layer._leaflet_id) {\n      layer.setStyle({\n        weight: 1.5,\n        dashArray: \"\",\n        fillOpacity: 1,\n      });\n      if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {\n        layer.bringToFront();\n      }\n    }\n  };\n\n  const geoJsonRefQuiz = useRef();\n\n  const ResetHighlight = (layer) => {\n    if (selected == null || selected._leaflet_id !== layer._leaflet_id) {\n      geoJsonRefQuiz.current.resetStyle(layer);\n    }\n  };\n\n  const Select = (layer) => {\n    if (selected !== null) {\n      var previous = selected;\n    }\n    console.log(props.nationsData[counter]);\n    if (layer.feature.properties.Nation === props.nationsData[counter]) {\n      layer.setStyle({\n        weight: 3,\n        color: \"#A4D6A5\",\n        fillOpacity: 0.5,\n        fillColor: \"#A4D6A5\",\n      });\n    } else {\n      layer.setStyle({\n        weight: 1,\n        color: \"white\",\n        fillColor: \"#F27272\",\n        fillOpacity: 0.5,\n      });\n    }\n\n    selected = layer;\n    if (previous) {\n      ResetHighlight(previous);\n      selected.closeTooltip();\n    }\n  };\n\n  const onEachFeatureFQuiz = (feature, layer) => {\n    layer.on({\n      click: function (e) {\n        counter = counter + 1;\n        console.log(counter);\n        Select(e.target);\n        props.handleSetAnswer(e.target.feature.properties.Nation);\n        e.target\n          .bindTooltip(feature.properties.Nation, {\n            direction: \"center\",\n            position: \"auto\",\n          })\n          .openTooltip();\n      },\n      mouseover: function (e) {\n        HighlightFeature(e.target);\n      },\n      mouseout: function (e) {\n        ResetHighlight(e.target);\n      },\n    });\n  };\n  return (\n    <GeoJSON\n      data={nations}\n      style={myConstClass.quizStyle}\n      onEachFeature={onEachFeatureFQuiz}\n      ref={geoJsonRefQuiz}\n    />\n  );\n}\n","import React from \"react\";\nimport { useRef } from \"react\";\nimport L from \"leaflet\";\nimport { GeoJSON } from \"react-leaflet\";\nimport * as myConstClass from \"./constants.js\";\nimport nations from \"../data/nations.json\";\n\nexport default function PeoplesMapInfo(props) {\n  let selected = null;\n\n  const HighlightFeature = (layer) => {\n    if (selected == null || selected._leaflet_id !== layer._leaflet_id) {\n      layer.setStyle({\n        /*weight: 3,\n            color: 'white',*/\n        weight: 1.5,\n        dashArray: \"\",\n        fillOpacity: 0.9,\n      });\n      /*layer.bindTooltip(feature.properties.Nation, {permanent: true, direction: 'center', position:'auto'}).openTooltip(); */\n\n      if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {\n        layer.bringToFront();\n      }\n    }\n  };\n\n  const geoJsonRef = useRef();\n\n  const ResetHighlight = (layer) => {\n    if (selected == null || selected._leaflet_id !== layer._leaflet_id) {\n      geoJsonRef.current.resetStyle(layer);\n    }\n  };\n\n  const Select = (layer) => {\n    if (selected !== null) {\n      var previous = selected;\n    }\n    props.handleSetInfo(layer.feature.properties);\n\n    layer.setStyle({\n      weight: 3,\n      color: \"white\",\n      fillOpacity: 1,\n    });\n\n    selected = layer;\n    if (previous) {\n      ResetHighlight(previous);\n    }\n  };\n\n  const onEachFeatureF = (feature, layer) => {\n    layer.on({\n      click: function (e) {\n        Select(e.target);\n      },\n      mouseover: function (e) {\n        HighlightFeature(e.target);\n      },\n      mouseout: function (e) {\n        ResetHighlight(e.target);\n      },\n    });\n    layer\n      .bindTooltip(feature.properties.Nation, {\n        permanent: true,\n        direction: \"center\",\n        position: \"auto\",\n      })\n      .openTooltip();\n  };\n\n  return (\n    <GeoJSON\n      data={nations}\n      style={myConstClass.subteStyle}\n      onEachFeature={onEachFeatureF}\n      ref={geoJsonRef}\n    />\n  );\n}\n","import React from \"react\";\nimport { useRef } from \"react\";\nimport L from \"leaflet\";\nimport { GeoJSON } from \"react-leaflet\";\nimport * as myConstClass from \"./constants.js\";\nimport nations from \"../data/nations.json\";\n\nexport default function PeoplesMapStart() {\n  const HighlightFeature = (layer) => {\n    layer.setStyle({\n      weight: 1.5,\n      dashArray: \"\",\n      fillOpacity: 0.8,\n    });\n    if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {\n      layer.bringToFront();\n    }\n  };\n\n  const geoJsonRef = useRef();\n\n  const ResetHighlight = (layer) => {\n    geoJsonRef.current.resetStyle(layer);\n  };\n\n  const onEachFeatureF = (feature, layer) => {\n    layer.on({\n      mouseover: function (e) {\n        HighlightFeature(e.target);\n      },\n      mouseout: function (e) {\n        ResetHighlight(e.target);\n      },\n    });\n    layer\n      .bindTooltip(feature.properties.Nation, {\n        direction: \"center\",\n        position: \"auto\",\n      })\n      .openTooltip();\n  };\n  return (\n    <GeoJSON\n      data={nations}\n      style={myConstClass.subteStyle}\n      onEachFeature={onEachFeatureF}\n      ref={geoJsonRef}\n    />\n  );\n}\n","import nationsData from \"../data/nations.json\";\n\n//select nations from json file\nexport const selectedNations = [];\nfor (var i = 0; i < nationsData.features.length; i++) {\n  selectedNations.push(nationsData.features[i].properties.Nation);\n}\n\n// //create function that shuffles array\n// function shuffleArray(array) {\n//   for (var i = array.length - 1; i > 0; i--) {\n//     var j = Math.floor(Math.random() * (i + 1));\n//     var temp = array[i];\n//     array[i] = array[j];\n//     array[j] = temp;\n//   }\n//   return array;\n// }\n\n// //export 10 selected peoples for the game\n// export const selectedNations2 = shuffleArray(selectedNations).slice(0, 10);\n","import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport L from \"leaflet\";\nimport {\n  MapContainer,\n  GeoJSON,\n  ScaleControl,\n  ZoomControl,\n} from \"react-leaflet\";\nimport InfoBox from \"./InfoBox\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"./PeoplesMap.css\";\nimport \"proj4leaflet\";\nimport \"proj4\";\nimport * as myConstClass from \"./constants.js\";\nimport world from \"../data/world.json\";\nimport russia from \"../data/russia.json\";\nimport lakes from \"../data/lakes.json\";\nimport PeoplesMapQuiz from \"./PeoplesMapQuiz\";\nimport PeoplesMapInfo from \"./PeoplesMapInfo\";\nimport PeoplesMapStart from \"./PeoplesMapStart\";\nimport { selectedNations } from \"./quizConstants\";\n\nconst PeoplesMap = (props) => {\n  const [nationsData, setNationsData] = useState(selectedNations);\n  let [info, SetInfo] = useState(null);\n  let [answer, SetAnswer] = useState(null);\n\n  //create function that shuffles array\n  function shuffleArray(array) {\n    for (var i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  }\n\n  useEffect(() => {\n    if (props.quizMode === false) {\n      const newNations = shuffleArray(selectedNations).slice(0, 10);\n      setNationsData(newNations);\n    }\n  }, [props.quizMode]);\n\n  const crs = new L.Proj.CRS(\n    \"EPSG:3576\",\n    \"+proj=laea +lat_0=90 +lon_0=90 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs\",\n    {\n      resolutions: [\n        32768, 16384, 8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4,\n        2, 1, 0.5,\n      ],\n    }\n  );\n\n  return (\n    <>\n      <InfoBox\n        info={info}\n        answer={answer}\n        isQuiz={props.quizMode}\n        islearn={props.learnMode}\n        isStart={props.startMode}\n        handleStartQuizClick={props.handleStartQuizClick}\n        handleLearnClick={props.handleLearnClick}\n        handleStartModeClick={props.handleStartModeClick}\n        nationsData={nationsData}\n      />\n\n      <MapContainer\n        style={{ height: \"100vh\" }}\n        zoomControl={false}\n        zoom={2}\n        center={[65, 130]}\n        minZoom={2}\n        maxZoom={5}\n        crs={crs}\n        maxBounds={[\n          [20, 75],\n          [870, 2000],\n        ]}\n      >\n        <GeoJSON data={world} style={myConstClass.basemapStyle2} />\n        <GeoJSON data={russia} style={myConstClass.basemapStyle} />\n        <GeoJSON data={lakes} style={myConstClass.waterStyle} />\n\n        {props.quizMode ? (\n          <PeoplesMapQuiz\n            handleSetAnswer={SetAnswer}\n            nationsData={nationsData}\n          />\n        ) : null}\n        {props.learnMode ? <PeoplesMapInfo handleSetInfo={SetInfo} /> : null}\n        {!props.quizMode & !props.learnMode ? <PeoplesMapStart /> : null}\n\n        <ScaleControl position=\"bottomleft\" />\n        <ZoomControl position=\"bottomleft\" />\n      </MapContainer>\n    </>\n  );\n};\n\nexport default PeoplesMap;\n","import React, {useState} from \"react\";\nimport PeoplesMap from \"./PeoplesMap\";\nimport \"./Peoples.css\";\n\nconst Peoples = () => {\n\n  const [quizMode, setQuizMode] = useState(false);\n  const [learnMode, setLearnMode] = useState(false);\n  const [startMode, setStartMode] = useState(true);\n\n  const handleStartQuizClick = (option) => {\n    setQuizMode(option);\n  };\n\n  const handleLearnClick = (option) => {\n    setLearnMode(option);\n  };\n\n  const handleStartModeClick = (option) => {\n    setStartMode(option);\n  };\n\n  return (\n    <div>\n      <div className=\"container\">\n        <div className=\"mainmap\">\n          <PeoplesMap\n            quizMode={quizMode}\n            learnMode={learnMode}\n            startMode={startMode}\n            handleStartQuizClick={handleStartQuizClick}\n            handleLearnClick={handleLearnClick}\n            handleStartModeClick={handleStartModeClick}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Peoples;\n","import React from \"react\";\nimport \"./App.css\";\nimport Peoples from \"./components/Peoples\";\n\nfunction App() {\n  return (\n    <div className='main'>\n      <Peoples/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport './fonts/Geometria.woff';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}